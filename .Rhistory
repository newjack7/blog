fullDates <- fullDates %>% filter(word3 !=  "shal")
#This looks complicated but it takes each month which converts it to a digit for calculations
fullDates <- fullDates %>% mutate(word2 = case_when(word2 == "january" ~ "01", word2 == "february" ~ "02", word2 == "march" ~ "03", word2 == "april" ~ "04", word2 == "may" ~ "05", word2 == "june" ~ "06", word2 == "july" ~ "07", word2 == "august" ~ "08", word2 == "september" ~ "09", word2 == "october" ~ "10", word2 == "november" ~ "11", word2 == "december" ~ "12", word2 == "jan" ~ "01", word2 == "feb" ~ "02", word2 == "mar" ~ "03", word2 == "apr" ~ "04", word2 == "may" ~ "05", word2 == "jun" ~ "06", word2 == "jul" ~ "07", word2 == "aug" ~ "08", word2 == "sep" ~ "09", word2 == "oct" ~ "10", word2 == "nov" ~ "11", word2 == "dec" ~ "12", word2 == "sept" ~ "09"))
#Rename columns to year, month, day
fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Create new column with date in correct format
fullDates <- fullDates %>% mutate(date = make_date(year, month, day))
#Merge fullDates table with the original text
fullDated <- full_join(LincolnshireEvents, fullDates)
#Finally I merge the converted regnal years, the calendar years, and allegations with precise dating to the original data which includes all allegations
yearsDated <- full_join(yearsCombined, fullDated)
lincsEventsDated <- full_join(yearsDated, LincolnshireEvents)
#mutate regnal years to regnal or calendar
lincsEventsDated <- lincsEventsDated %>% mutate(regnalYear = case_when(regnalYear == TRUE ~ "regnal", regnalYear == FALSE ~ "calendar"))
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_classic()
plot1Year
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_economist()
library(ggthemes)
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_economist()
plot1Year
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_economist() + scale_fill_economist()
plot1Year
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_economist() + scale_fill_economist()
plot1Year
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_hc()
plot1Year
install.packages('ggthemr')
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_bw()
plot1Year
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_dark()
plot1Year
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_light()
plot1Year
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
plot1Year
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
plot1Year
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
plot1Year
#First I have to break the corpus into bigrams (two word pairings)
lincs_bigrams <- LincolnshireEvents %>%
unnest_tokens(bigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 2)
#In order to extract the regnal years however I need to split this text into two columns which I can filter
bigrams_separated <- lincs_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
#Filter for the regnal years
regYears <- bigrams_separated %>%
filter(word1 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "12", "13", "14", "15")) %>%
filter(word2 %in%  "edward")
#Unite the columns for analysis
regYears_united <- regYears %>%
unite(bigram, word1, word2, sep = " ")
#Create table of all years mentioned in the text
yearsTag <- Lincolnshire_Tokens %>% filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341", "1342", "1343", "1344", "1345"))
#Merge all years mentioned with the text
years <- inner_join(yearsTag, LincolnshireEvents)
#New column to tag as calendar year
years <- years %>% mutate(regnalYear = is.na(word))
#Rename column to year
years <- years %>% rename(year = word)
#Count of regnal years
regYears_count <- regYears_united %>%
count(bigram, sort = TRUE)
#Plot of regnal years sorted chronologically
plotRegnal <- regYears_count %>% mutate(bigram = fct_relevel(bigram, '1 edward', '2 edward', '3 edward', '4 edward', '5 edward', '6 edward', '7 edward', '8 edward', '9 edward', '10 edward', '11 edward', '12 edward', '13 edward', '14 edward')) %>%  ggplot(aes(bigram, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Count of regnal years in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
plotRegnal
#Convert Regnal Yearls to calendar year
regYears_converted <-  regYears_united %>% mutate(bigram = case_when(bigram == "1 edward" ~ "1327", bigram == "2 edward" ~ "1328", bigram == "3 edward" ~ "1329", bigram == "4 edward" ~ "1330", bigram == "5 edward" ~ "1331", bigram == "6 edward" ~ "1332", bigram == "7 edward" ~ "1333", bigram == "8 edward" ~ "1334", bigram == "9 edward" ~ "1335", bigram == "10 edward" ~ "1336", bigram == "11 edward" ~ "1337", bigram == "12 edward" ~ "1338", bigram == "13 edward" ~ "1339", bigram == "14 edward" ~ "1340"))
#Rename column to match for merging
regYears_converted <- regYears_converted %>% rename(year = bigram)
#Create new column to tag as Regnal date
regYears_converted <- regYears_converted %>% mutate(regnalYear = !is.na(year))
#Tags each entry with a regnal year
regnalTagged <- inner_join(regYears_converted, LincolnshireEvents)
#Merge of the converted regnal years and the calendar years
yearsCombined<- inner_join(years, regnalTagged)
yearsJoincount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
#Create Trigrams
lincs_trigrams <- LincolnshireEvents %>%
unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
#Count of most common trigrams
trigrams_count <- lincs_trigrams %>%
count(trigram, sort = TRUE)
#Split into three columns
trigrams_separated <- lincs_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
#Filter for the months
fullDates <- trigrams_separated %>%
filter(word2 %in%  c("january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "sept"))
#This fixes errors which result from the formating of the original text that had no space between the comma and the digits which refer to a date eg. '1,26' rather than '1, 26'. So when it was seperated into trigrams it detected it as a single word rather than two words.
fullDates$word1[fullDates$word1 == "1,26" ] <- 26
fullDates$word1[fullDates$word1 == "186,25" ] <- 25
fullDates$word1[fullDates$word1 == "536,4" ] <- 04
#These result from the OCR reading 27 as t1 or interpreting the superscript '1' and '2' from footnotes as normal digits.
fullDates$word1[fullDates$word1 == "t1" ] <- 27
fullDates$word3[fullDates$word3 == "13401" ] <- 1340
fullDates$word3[fullDates$word3 == "13402" ] <- 1340
#In these allegations there were multiple dates and these instances were referring back to a prior date. The year was not included as it was inferred from the earlier instance.
fullDates$word3[fullDates$word3 == "and" ] <- 1338
fullDates$word3[fullDates$word3 == "gilbert" ] <- 1338
fullDates$word3[fullDates$word3 == "to" ] <- 1339
fullDates$word3[fullDates$word3 == "at" ] <- 1330
fullDates$word3[fullDates$word3 == "paid" ] <- 1339
#The following two commands remove rows which were incorrectly added as they interpreted personal names as months ('mar' for marshal or the surname 'la march')
fullDates <- fullDates %>% filter(word1 !=  "la")
fullDates <- fullDates %>% filter(word3 !=  "shal")
#This looks complicated but it takes each month which converts it to a digit for calculations
fullDates <- fullDates %>% mutate(word2 = case_when(word2 == "january" ~ "01", word2 == "february" ~ "02", word2 == "march" ~ "03", word2 == "april" ~ "04", word2 == "may" ~ "05", word2 == "june" ~ "06", word2 == "july" ~ "07", word2 == "august" ~ "08", word2 == "september" ~ "09", word2 == "october" ~ "10", word2 == "november" ~ "11", word2 == "december" ~ "12", word2 == "jan" ~ "01", word2 == "feb" ~ "02", word2 == "mar" ~ "03", word2 == "apr" ~ "04", word2 == "may" ~ "05", word2 == "jun" ~ "06", word2 == "jul" ~ "07", word2 == "aug" ~ "08", word2 == "sep" ~ "09", word2 == "oct" ~ "10", word2 == "nov" ~ "11", word2 == "dec" ~ "12", word2 == "sept" ~ "09"))
#Rename columns to year, month, day
fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Create new column with date in correct format
fullDates <- fullDates %>% mutate(date = make_date(year, month, day))
#Merge fullDates table with the original text
fullDated <- inner_join(LincolnshireEvents, fullDates)
#Finally I merge the converted regnal years, the calendar years, and allegations with precise dating to the original data which includes all allegations
yearsDated <- inner_join(yearsCombined, fullDated)
lincsEventsDated <- inner_join(yearsDated, LincolnshireEvents)
#mutate regnal years to regnal or calendar
lincsEventsDated <- lincsEventsDated %>% mutate(regnalYear = case_when(regnalYear == TRUE ~ "regnal", regnalYear == FALSE ~ "calendar"))
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
plot1Year
#First I have to break the corpus into bigrams (two word pairings)
lincs_bigrams <- LincolnshireEvents %>%
unnest_tokens(bigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 2)
#In order to extract the regnal years however I need to split this text into two columns which I can filter
bigrams_separated <- lincs_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
#Filter for the regnal years
regYears <- bigrams_separated %>%
filter(word1 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "12", "13", "14", "15")) %>%
filter(word2 %in%  "edward")
#Unite the columns for analysis
regYears_united <- regYears %>%
unite(bigram, word1, word2, sep = " ")
#Create table of all years mentioned in the text
yearsTag <- Lincolnshire_Tokens %>% filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341", "1342", "1343", "1344", "1345"))
#Merge all years mentioned with the text
years <- inner_join(yearsTag, LincolnshireEvents)
#New column to tag as calendar year
years <- years %>% mutate(regnalYear = is.na(word))
#Rename column to year
years <- years %>% rename(year = word)
#Count of regnal years
regYears_count <- regYears_united %>%
count(bigram, sort = TRUE)
#Plot of regnal years sorted chronologically
plotRegnal <- regYears_count %>% mutate(bigram = fct_relevel(bigram, '1 edward', '2 edward', '3 edward', '4 edward', '5 edward', '6 edward', '7 edward', '8 edward', '9 edward', '10 edward', '11 edward', '12 edward', '13 edward', '14 edward')) %>%  ggplot(aes(bigram, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Count of regnal years in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
plotRegnal
#Convert Regnal Yearls to calendar year
regYears_converted <-  regYears_united %>% mutate(bigram = case_when(bigram == "1 edward" ~ "1327", bigram == "2 edward" ~ "1328", bigram == "3 edward" ~ "1329", bigram == "4 edward" ~ "1330", bigram == "5 edward" ~ "1331", bigram == "6 edward" ~ "1332", bigram == "7 edward" ~ "1333", bigram == "8 edward" ~ "1334", bigram == "9 edward" ~ "1335", bigram == "10 edward" ~ "1336", bigram == "11 edward" ~ "1337", bigram == "12 edward" ~ "1338", bigram == "13 edward" ~ "1339", bigram == "14 edward" ~ "1340"))
#Rename column to match for merging
regYears_converted <- regYears_converted %>% rename(year = bigram)
#Create new column to tag as Regnal date
regYears_converted <- regYears_converted %>% mutate(regnalYear = !is.na(year))
#Tags each entry with a regnal year
regnalTagged <- inner_join(regYears_converted, LincolnshireEvents)
#Merge of the converted regnal years and the calendar years
yearsCombined<- inner_join(years, regnalTagged)
yearsJoincount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
#Create Trigrams
lincs_trigrams <- LincolnshireEvents %>%
unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
#Count of most common trigrams
trigrams_count <- lincs_trigrams %>%
count(trigram, sort = TRUE)
#Split into three columns
trigrams_separated <- lincs_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
#Filter for the months
fullDates <- trigrams_separated %>%
filter(word2 %in%  c("january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "sept"))
#This fixes errors which result from the formating of the original text that had no space between the comma and the digits which refer to a date eg. '1,26' rather than '1, 26'. So when it was seperated into trigrams it detected it as a single word rather than two words.
fullDates$word1[fullDates$word1 == "1,26" ] <- 26
fullDates$word1[fullDates$word1 == "186,25" ] <- 25
fullDates$word1[fullDates$word1 == "536,4" ] <- 04
#These result from the OCR reading 27 as t1 or interpreting the superscript '1' and '2' from footnotes as normal digits.
fullDates$word1[fullDates$word1 == "t1" ] <- 27
fullDates$word3[fullDates$word3 == "13401" ] <- 1340
fullDates$word3[fullDates$word3 == "13402" ] <- 1340
#In these allegations there were multiple dates and these instances were referring back to a prior date. The year was not included as it was inferred from the earlier instance.
fullDates$word3[fullDates$word3 == "and" ] <- 1338
fullDates$word3[fullDates$word3 == "gilbert" ] <- 1338
fullDates$word3[fullDates$word3 == "to" ] <- 1339
fullDates$word3[fullDates$word3 == "at" ] <- 1330
fullDates$word3[fullDates$word3 == "paid" ] <- 1339
#The following two commands remove rows which were incorrectly added as they interpreted personal names as months ('mar' for marshal or the surname 'la march')
fullDates <- fullDates %>% filter(word1 !=  "la")
fullDates <- fullDates %>% filter(word3 !=  "shal")
#This looks complicated but it takes each month which converts it to a digit for calculations
fullDates <- fullDates %>% mutate(word2 = case_when(word2 == "january" ~ "01", word2 == "february" ~ "02", word2 == "march" ~ "03", word2 == "april" ~ "04", word2 == "may" ~ "05", word2 == "june" ~ "06", word2 == "july" ~ "07", word2 == "august" ~ "08", word2 == "september" ~ "09", word2 == "october" ~ "10", word2 == "november" ~ "11", word2 == "december" ~ "12", word2 == "jan" ~ "01", word2 == "feb" ~ "02", word2 == "mar" ~ "03", word2 == "apr" ~ "04", word2 == "may" ~ "05", word2 == "jun" ~ "06", word2 == "jul" ~ "07", word2 == "aug" ~ "08", word2 == "sep" ~ "09", word2 == "oct" ~ "10", word2 == "nov" ~ "11", word2 == "dec" ~ "12", word2 == "sept" ~ "09"))
#Rename columns to year, month, day
fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Create new column with date in correct format
fullDates <- fullDates %>% mutate(date = make_date(year, month, day))
#Merge fullDates table with the original text
fullDated <- inner_join(LincolnshireEvents, fullDates)
#Finally I merge the converted regnal years, the calendar years, and allegations with precise dating to the original data which includes all allegations
yearsDated <- inner_join(yearsCombined, fullDated)
lincsEventsDated <- inner_join(yearsDated, LincolnshireEvents)
#mutate regnal years to regnal or calendar
lincsEventsDated <- lincsEventsDated %>% mutate(regnalYear = case_when(regnalYear == TRUE ~ "regnal", regnalYear == FALSE ~ "calendar"))
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
#Rename columns to year, month, day
fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Create Trigrams
lincs_trigrams <- LincolnshireEvents %>%
unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
#Count of most common trigrams
trigrams_count <- lincs_trigrams %>%
count(trigram, sort = TRUE)
#Split into three columns
trigrams_separated <- lincs_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
#Filter for the months
fullDates <- trigrams_separated %>%
filter(word2 %in%  c("january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "sept"))
#This fixes errors which result from the formating of the original text that had no space between the comma and the digits which refer to a date eg. '1,26' rather than '1, 26'. So when it was seperated into trigrams it detected it as a single word rather than two words.
fullDates$word1[fullDates$word1 == "1,26" ] <- 26
fullDates$word1[fullDates$word1 == "186,25" ] <- 25
fullDates$word1[fullDates$word1 == "536,4" ] <- 04
#These result from the OCR reading 27 as t1 or interpreting the superscript '1' and '2' from footnotes as normal digits.
fullDates$word1[fullDates$word1 == "t1" ] <- 27
fullDates$word3[fullDates$word3 == "13401" ] <- 1340
fullDates$word3[fullDates$word3 == "13402" ] <- 1340
#In these allegations there were multiple dates and these instances were referring back to a prior date. The year was not included as it was inferred from the earlier instance.
fullDates$word3[fullDates$word3 == "and" ] <- 1338
fullDates$word3[fullDates$word3 == "gilbert" ] <- 1338
fullDates$word3[fullDates$word3 == "to" ] <- 1339
fullDates$word3[fullDates$word3 == "at" ] <- 1330
fullDates$word3[fullDates$word3 == "paid" ] <- 1339
#The following two commands remove rows which were incorrectly added as they interpreted personal names as months ('mar' for marshal or the surname 'la march')
fullDates <- fullDates %>% filter(word1 !=  "la")
fullDates <- fullDates %>% filter(word3 !=  "shal")
#This looks complicated but it takes each month which converts it to a digit for calculations
fullDates <- fullDates %>% mutate(word2 = case_when(word2 == "january" ~ "01", word2 == "february" ~ "02", word2 == "march" ~ "03", word2 == "april" ~ "04", word2 == "may" ~ "05", word2 == "june" ~ "06", word2 == "july" ~ "07", word2 == "august" ~ "08", word2 == "september" ~ "09", word2 == "october" ~ "10", word2 == "november" ~ "11", word2 == "december" ~ "12", word2 == "jan" ~ "01", word2 == "feb" ~ "02", word2 == "mar" ~ "03", word2 == "apr" ~ "04", word2 == "may" ~ "05", word2 == "jun" ~ "06", word2 == "jul" ~ "07", word2 == "aug" ~ "08", word2 == "sep" ~ "09", word2 == "oct" ~ "10", word2 == "nov" ~ "11", word2 == "dec" ~ "12", word2 == "sept" ~ "09"))
#Rename columns to year, month, day
fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Create new column with date in correct format
fullDates <- fullDates %>% mutate(date = make_date(year, month, day))
#Merge fullDates table with the original text
fullDated <- inner_join(LincolnshireEvents, fullDates)
#Finally I merge the converted regnal years, the calendar years, and allegations with precise dating to the original data which includes all allegations
yearsDated <- inner_join(yearsCombined, fullDated)
lincsEventsDated <- inner_join(yearsDated, LincolnshireEvents)
#mutate regnal years to regnal or calendar
lincsEventsDated <- lincsEventsDated %>% mutate(regnalYear = case_when(regnalYear == TRUE ~ "regnal", regnalYear == FALSE ~ "calendar"))
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
#Create Trigrams
lincs_trigrams <- LincolnshireEvents %>%
unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
#Count of most common trigrams
trigrams_count <- lincs_trigrams %>%
count(trigram, sort = TRUE)
#Split into three columns
trigrams_separated <- lincs_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
#Filter for the months
fullDates <- trigrams_separated %>%
filter(word2 %in%  c("january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "sept"))
#This fixes errors which result from the formating of the original text that had no space between the comma and the digits which refer to a date eg. '1,26' rather than '1, 26'. So when it was seperated into trigrams it detected it as a single word rather than two words.
fullDates$word1[fullDates$word1 == "1,26" ] <- 26
fullDates$word1[fullDates$word1 == "186,25" ] <- 25
fullDates$word1[fullDates$word1 == "536,4" ] <- 04
#These result from the OCR reading 27 as t1 or interpreting the superscript '1' and '2' from footnotes as normal digits.
fullDates$word1[fullDates$word1 == "t1" ] <- 27
fullDates$word3[fullDates$word3 == "13401" ] <- 1340
fullDates$word3[fullDates$word3 == "13402" ] <- 1340
#In these allegations there were multiple dates and these instances were referring back to a prior date. The year was not included as it was inferred from the earlier instance.
fullDates$word3[fullDates$word3 == "and" ] <- 1338
fullDates$word3[fullDates$word3 == "gilbert" ] <- 1338
fullDates$word3[fullDates$word3 == "to" ] <- 1339
fullDates$word3[fullDates$word3 == "at" ] <- 1330
fullDates$word3[fullDates$word3 == "paid" ] <- 1339
#The following two commands remove rows which were incorrectly added as they interpreted personal names as months ('mar' for marshal or the surname 'la march')
fullDates <- fullDates %>% filter(word1 !=  "la")
fullDates <- fullDates %>% filter(word3 !=  "shal")
#This looks complicated but it takes each month which converts it to a digit for calculations
fullDates <- fullDates %>% mutate(word2 = case_when(word2 == "january" ~ "01", word2 == "february" ~ "02", word2 == "march" ~ "03", word2 == "april" ~ "04", word2 == "may" ~ "05", word2 == "june" ~ "06", word2 == "july" ~ "07", word2 == "august" ~ "08", word2 == "september" ~ "09", word2 == "october" ~ "10", word2 == "november" ~ "11", word2 == "december" ~ "12", word2 == "jan" ~ "01", word2 == "feb" ~ "02", word2 == "mar" ~ "03", word2 == "apr" ~ "04", word2 == "may" ~ "05", word2 == "jun" ~ "06", word2 == "jul" ~ "07", word2 == "aug" ~ "08", word2 == "sep" ~ "09", word2 == "oct" ~ "10", word2 == "nov" ~ "11", word2 == "dec" ~ "12", word2 == "sept" ~ "09"))
#Rename columns to year, month, day
fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Create new column with date in correct format
fullDates <- fullDates %>% mutate(date = make_date(year, month, day))
#Merge fullDates table with the original text
fullDated <- inner_join(LincolnshireEvents, fullDates)
#Finally I merge the converted regnal years, the calendar years, and allegations with precise dating to the original data which includes all allegations
yearsDated <- inner_join(yearsCombined, fullDated)
lincsEventsDated <- inner_join(yearsDated, LincolnshireEvents)
View(yearsDated)
View(LincolnshireEvents)
View(yearsCombined)
View(fullDated)
View(regnalTagged)
View(years)
#Merge of the converted regnal years and the calendar years
yearsCombined<- inner_join(years, regnalTagged)
#Merge of the converted regnal years and the calendar years
yearsCombined<- full_join(years, regnalTagged)
#Rename columns to year, month, day
fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Rename columns to year, month, day
#fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Create new column with date in correct format
fullDates <- fullDates %>% mutate(date = make_date(year, month, day))
#Merge fullDates table with the original text
fullDated <- inner_join(LincolnshireEvents, fullDates)
#Finally I merge the converted regnal years, the calendar years, and allegations with precise dating to the original data which includes all allegations
yearsDated <- inner_join(yearsCombined, fullDated)
lincsEventsDated <- inner_join(yearsDated, LincolnshireEvents)
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
#mutate regnal years to regnal or calendar
lincsEventsDated <- lincsEventsDated %>% mutate(regnalYear = case_when(regnalYear == TRUE ~ "regnal", regnalYear == FALSE ~ "calendar"))
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
View(lincsEventsDated)
library(tidyverse)
library(tidytext)
library(lubridate)
setwd("C:/Users/Jack/Google Drive/PhD/Sources/Data/Databases/OCR Trial Data/Lincolnshire_1341")
load(".Rdata")
#In this command I create a filter which extracts allegations with at least a year mentioned. This creates a table of allegations which include a year.
yearsCount <- Lincolnshire_Tokens %>%
filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(word, sort = TRUE)
# This plot shows which years are most commonly mentioned in the allegations
plot1Year <- yearsCount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
plot1Year
#First I have to break the corpus into bigrams (two word pairings)
lincs_bigrams <- LincolnshireEvents %>%
unnest_tokens(bigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 2)
#In order to extract the regnal years however I need to split this text into two columns which I can filter
bigrams_separated <- lincs_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
#Filter for the regnal years
regYears <- bigrams_separated %>%
filter(word1 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "12", "13", "14", "15")) %>%
filter(word2 %in%  "edward")
#Unite the columns for analysis
regYears_united <- regYears %>%
unite(bigram, word1, word2, sep = " ")
#Create table of all years mentioned in the text
yearsTag <- Lincolnshire_Tokens %>% filter(word %in% c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341", "1342", "1343", "1344", "1345"))
#Merge all years mentioned with the text
years <- full_join(yearsTag, LincolnshireEvents)
#New column to tag as calendar year
years <- years %>% mutate(regnalYear = is.na(word))
#Rename column to year
years <- years %>% rename(year = word)
#Count of regnal years
regYears_count <- regYears_united %>%
count(bigram, sort = TRUE)
#Plot of regnal years sorted chronologically
plotRegnal <- regYears_count %>% mutate(bigram = fct_relevel(bigram, '1 edward', '2 edward', '3 edward', '4 edward', '5 edward', '6 edward', '7 edward', '8 edward', '9 edward', '10 edward', '11 edward', '12 edward', '13 edward', '14 edward')) %>%  ggplot(aes(bigram, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Count of regnal years in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
plotRegnal
#Convert Regnal Yearls to calendar year
regYears_converted <-  regYears_united %>% mutate(bigram = case_when(bigram == "1 edward" ~ "1327", bigram == "2 edward" ~ "1328", bigram == "3 edward" ~ "1329", bigram == "4 edward" ~ "1330", bigram == "5 edward" ~ "1331", bigram == "6 edward" ~ "1332", bigram == "7 edward" ~ "1333", bigram == "8 edward" ~ "1334", bigram == "9 edward" ~ "1335", bigram == "10 edward" ~ "1336", bigram == "11 edward" ~ "1337", bigram == "12 edward" ~ "1338", bigram == "13 edward" ~ "1339", bigram == "14 edward" ~ "1340"))
#Rename column to match for merging
regYears_converted <- regYears_converted %>% rename(year = bigram)
#Create new column to tag as Regnal date
regYears_converted <- regYears_converted %>% mutate(regnalYear = !is.na(year))
#Tags each entry with a regnal year
regnalTagged <- full_join(regYears_converted, LincolnshireEvents)
#Merge of the converted regnal years and the calendar years
yearsCombined<- full_join(years, regnalTagged)
yearsJoincount %>% ggplot(aes(word, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=-0.3, size=3.5) + ggtitle("Frequency of allegations by year in TNA JUST 1/521")+ ylab(NULL) + xlab(NULL) + coord_flip() + theme_minimal()
#Create Trigrams
lincs_trigrams <- LincolnshireEvents %>%
unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
#Count of most common trigrams
trigrams_count <- lincs_trigrams %>%
count(trigram, sort = TRUE)
#Split into three columns
trigrams_separated <- lincs_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
#Filter for the months
fullDates <- trigrams_separated %>%
filter(word2 %in%  c("january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "sept"))
#This fixes errors which result from the formating of the original text that had no space between the comma and the digits which refer to a date eg. '1,26' rather than '1, 26'. So when it was seperated into trigrams it detected it as a single word rather than two words.
fullDates$word1[fullDates$word1 == "1,26" ] <- 26
fullDates$word1[fullDates$word1 == "186,25" ] <- 25
fullDates$word1[fullDates$word1 == "536,4" ] <- 04
#These result from the OCR reading 27 as t1 or interpreting the superscript '1' and '2' from footnotes as normal digits.
fullDates$word1[fullDates$word1 == "t1" ] <- 27
fullDates$word3[fullDates$word3 == "13401" ] <- 1340
fullDates$word3[fullDates$word3 == "13402" ] <- 1340
#In these allegations there were multiple dates and these instances were referring back to a prior date. The year was not included as it was inferred from the earlier instance.
fullDates$word3[fullDates$word3 == "and" ] <- 1338
fullDates$word3[fullDates$word3 == "gilbert" ] <- 1338
fullDates$word3[fullDates$word3 == "to" ] <- 1339
fullDates$word3[fullDates$word3 == "at" ] <- 1330
fullDates$word3[fullDates$word3 == "paid" ] <- 1339
#The following two commands remove rows which were incorrectly added as they interpreted personal names as months ('mar' for marshal or the surname 'la march')
fullDates <- fullDates %>% filter(word1 !=  "la")
fullDates <- fullDates %>% filter(word3 !=  "shal")
#This looks complicated but it takes each month which converts it to a digit for calculations
fullDates <- fullDates %>% mutate(word2 = case_when(word2 == "january" ~ "01", word2 == "february" ~ "02", word2 == "march" ~ "03", word2 == "april" ~ "04", word2 == "may" ~ "05", word2 == "june" ~ "06", word2 == "july" ~ "07", word2 == "august" ~ "08", word2 == "september" ~ "09", word2 == "october" ~ "10", word2 == "november" ~ "11", word2 == "december" ~ "12", word2 == "jan" ~ "01", word2 == "feb" ~ "02", word2 == "mar" ~ "03", word2 == "apr" ~ "04", word2 == "may" ~ "05", word2 == "jun" ~ "06", word2 == "jul" ~ "07", word2 == "aug" ~ "08", word2 == "sep" ~ "09", word2 == "oct" ~ "10", word2 == "nov" ~ "11", word2 == "dec" ~ "12", word2 == "sept" ~ "09"))
#Rename columns to year, month, day
fullDates <- fullDates %>% rename(day = word1, month = word2, year = word3)
#Create new column with date in correct format
fullDates <- fullDates %>% mutate(date = make_date(year, month, day))
#Merge fullDates table with the original text
fullDated <- full_join(LincolnshireEvents, fullDates)
#Finally I merge the converted regnal years, the calendar years, and allegations with precise dating to the original data which includes all allegations
yearsDated <- full_join(yearsCombined, fullDated)
lincsEventsDated <- full_join(yearsDated, LincolnshireEvents)
#mutate regnal years to regnal or calendar
lincsEventsDated <- lincsEventsDated %>% mutate(regnalYear = case_when(regnalYear == TRUE ~ "regnal", regnalYear == FALSE ~ "calendar"))
#Plot of regnal years and calendar years side-by-side
lincsEventsDated %>% filter(!is.na(regnalYear)) %>% filter(year %in%  c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) %>% count(year, regnalYear, sort=TRUE)  %>% ggplot(aes(year, n)) + geom_col(fill="#ffd700", position = "dodge") + geom_text(aes(label=n), hjust=0.3, size=3.5) + ylab(NULL) + xlab(NULL) + facet_wrap(. ~regnalYear) + coord_flip() + theme_minimal()
lincsEventsDated %>% ggplot(aes(date)) + geom_histogram(binwidth = 35)+  theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + theme_minimal()
blogdown:::serve_site()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ylab(NULL) + xlab(NULL) + theme_minimal()
blogdown:::serve_site()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_discrete(limits=c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_discrete(limits=c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_discrete() + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_continuous(year = pretty(dat$x, n = 1)) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_continuous(breaks = seq(1327, 1341, by = 1)) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_continuous(breaks = seq("1327", "1341"", by = 1)) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_continuous(breaks = seq("1327", "1341", by = 1)) + theme_minimal()
datesCount %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_continuous(limits=c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) + theme_minimal()
View(datesCount)
#Convert Year into a factor
#$year <- factor(datesCount$year)
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_continuous(limits=c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) + theme_minimal()
#Convert Year into a factor
#$year <- factor(datesCount$year)
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + theme_minimal()
#Convert Year into a factor
lincsEventsDated$year <- factor(lincsEventsDated$year)
#Plot
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + theme_minimal()
#Plot
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_discrete(breaks=1:14,labels=year) + theme_minimal()
#Plot
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + xlab(NULL) + scale_x_discrete(breaks=1:14) + theme_minimal()
#Plot
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + scale_x_discrete(breaks=1:14) + theme_minimal()
#Plot
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + scale_x_discrete(breaks=1:14, labels=c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) + theme_minimal()
#Plot
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) + scale_x_discrete(breaks=1:15, labels=c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) + theme_minimal()
#Plot
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) +xlab(NULL) + scale_x_discrete(breaks=1:15, labels=c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) + theme_minimal()
#Plot
lincsEventsDated %>% count(date, year, sort=TRUE) %>% ggplot(aes(date)) + geom_histogram(fill="#ffd700", binwidth = 35) + ggtitle("Dates mentioned in McLane, 'The 1341 Royal Inquest in Lincolnshire' c. 1327-1341")+ ylab(NULL) +xlab(NULL) + scale_x_discrete(labels=c("1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341")) + theme_minimal()
