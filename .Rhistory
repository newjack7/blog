lincsBigrams <- lincsBigrams %>% separate(bigram, c("word1", "word2"), sep = " ")
#Filtered for stop words
lincsBigrams <- lincsBigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
#New counts based on frequency
lincsBigrams %>% count(bigram, sort = TRUE)
#New counts based on frequency
lincsBigrams %>% count(word1, word2, sort = TRUE)
stop_words
#Filtered for stop words
lincsBigrams <- lincsBigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
#New counts based on frequency
lincsBigrams %>% count(word1, word2, sort = TRUE)
library(readr)
lincs_stop_words <- read_csv("Lincolnshire csv Data/lincs_stop_words.csv")
View(lincs_stop_words)
#Filtered for stop words
lincsBigrams <- lincsBigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word)
#New counts based on frequency
lincsBigrams %>% count(word1, word2, sort = TRUE)
#Filtered for stop words
lincsBigrams <- lincsBigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word) %>%
filter(!word2 %in% iii)
library(readr)
lincs_stop_words <- read_csv("Lincolnshire csv Data/lincs_stop_words.csv")
View(lincs_stop_words)
#Filtered for stop words
lincsBigrams <- lincsBigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word)
#New counts based on frequency
lincsBigrams %>% count(word1, word2, sort = TRUE)
#Remove all digits
lincsBigrams <- lincsBigrams %>% filter(grepl('^\\D', word1))
lincsBigrams <- lincsBigrams %>% filter(grepl('^\\D', word2))
#New counts based on frequency
lincsBigrams %>% count(word1, word2, sort = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = FALSE)
blogdown:::stop_server()
lincs_bigrams %>%
filter(n > 40,
!str_detect(word1, "\\d"),
!str_detect(word2, "\\d")) %>%
visualize_bigrams()
library(dplyr)
library(tidyr)
library(tidytext)
library(ggplot2)
library(igraph)
library(ggraph)
#These are the functions created in the Tidy Text Textbook for creating bigrams and visualising them.
count_bigrams <- function(dataset) {
dataset %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(word1, word2, sort = TRUE)
}
visualize_bigrams <- function(bigrams) {
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
bigrams %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE, arrow = a) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
}
#Filters out the text so we just have text from the allegations (this column also contains information about people and places)
lincsEvents <- lincsOCR %>% filter(TYPE == 'EVENT') %>% select(UUID, QUOTE_TRANSCRIPTION)
#Extract the first word from each allegation and places it in a new column called 'lincsID' to act as an index to the original text
lincsEvents <- lincsEvents %>% mutate(lincsID = (str_extract(QUOTE_TRANSCRIPTION, "\\w+")))
View(lincsEvents)
#Extract the first word from each allegation and places it in a new column called 'lincsID' to act as an index to the original text
lincsEvents <- lincsEvents %>% mutate(lincsID = (str_extract(QUOTE_TRANSCRIPTION, "\\w+")))
library(stringr)
#Filters out the text so we just have text from the allegations (this column also contains information about people and places)
lincsEvents <- lincsOCR %>% filter(TYPE == 'EVENT') %>% select(UUID, QUOTE_TRANSCRIPTION)
#Extract the first word from each allegation and places it in a new column called 'lincsID' to act as an index to the original text
lincsEvents <- lincsEvents %>% mutate(lincsID = (str_extract(QUOTE_TRANSCRIPTION, "\\w+")))
#To check that all details from the volume has arrived properly. This checks that all the words extracted are the digits between 1 to 1230. Any missing values will be returned if there is an error. If all are present and correct then it should return integer(0).
missingIDS <- setdiff(1:1230, lincsEvents$lincsID)
missingIDS
#Next to create the bi-grams
lincsBigrams <- lincsEvents %>% unnest_tokens(bigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 2)
#Ordered by frequency
lincsBigrams %>% count(bigram, sort = TRUE)
#Removal of Stop words
lincsBigrams <- lincsBigrams %>% separate(bigram, c("word1", "word2"), sep = " ")
#Filtered for stop words
lincsBigrams <- lincsBigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word)
#Remove all digits
lincsBigrams <- lincsBigrams %>% filter(grepl('^\\D', word1))
lincsBigrams <- lincsBigrams %>% filter(grepl('^\\D', word2))
#New counts based on frequency
lincsBigrams %>% count(word1, word2, sort = TRUE)
stop_words
View(lincsEvents)
lincs_bigrams %>%
filter(n > 40,
!str_detect(word1, "\\d"),
!str_detect(word2, "\\d")) %>%
visualize_bigrams()
lincsBigrams %>% filter(n > 40,
!str_detect(word1, "\\d"),
!str_detect(word2, "\\d")) %>%
visualize_bigrams()
View(lincsBigrams)
lincsBigrams %>% filter(n > 40)%>%
visualize_bigrams()
lincsBigrams %>%  visualize_bigrams()
bigram_united <- lincsBigrams %>% unite(bigram, word1, word 2, sep = " ")
bigram_united <- lincsBigrams %>% unite(bigram, word1, word2, sep = " ")
#Create tri-grams
lincsTrigrams <- lincsEvents %>% unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
# This time Removal of Stop words
#lincsTrigrams <- lincsTrigrams %>% separate(trigram, c("word1", "word2", "word3"), sep = " ")
# This time Removal of Stop words
#lincsTrigrams <- lincsTrigrams %>% separate(trigram, c("word1", "word2", "word3"), sep = " ")
lincsTrigrams
#Create tri-grams
lincsTrigrams <- lincsEvents %>% unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
# Split the text into three columns based on the spaces between words
lincsTrigrams <- lincsTrigrams %>% separate(trigram, c("word1", "word2", "word3"), sep = " ")
lincsTrigrams
#Create tri-grams
lincsTrigrams <- lincsEvents %>% unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
# Split the text into three columns based on the spaces between words
lincsTrigrams <- lincsTrigrams %>% separate(trigram, c("word1", "word2", "word3"), sep = " ")
#Filtered for stop words
lincsTrigrams <- lincsTrigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word) %>%
filter(!word3 %in% lincs_stop_words$word)
lincsTrigrams
#Create tri-grams
lincsTrigrams <- lincsEvents %>% unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
# Split the text into three columns based on the spaces between words
lincsTrigrams <- lincsTrigrams %>% separate(trigram, c("word1", "word2", "word3"), sep = " ")
#Filtered for stop words
lincsTrigrams <- lincsTrigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word) %>%
filter(!word3 %in% lincs_stop_words$word)
#Remove all digits
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word1))
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word2))
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word3))
lincsTrigrams
lincsTrigrams %>% count(word1, word2, word3, sort = TRUE)
lincsTrigrams %>% filter(word1 == roger, word2 == henry, word3 == thomas)
lincsTrigrams %>% filter(word1 == "roger", word2 == "henry", word3 == "thomas")
lincsTrigrams %>% filter(word1 == "roger", word2 == "henry", word3 == "thomas") %>% summarise(lincsID)
lincsTrigrams %>% filter(word1 == "roger", word2 == "henry", word3 == "thomas")
#Finally I reunite the two columns for purposes of later analyses
bigramUnited <- lincsBigrams %>% unite(bigram, word1, word2, sep = " ")
bigramUnited
bigramUnited %>%
count(lincsID, bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramUnited %>%
count(lincsID, bigram, sort = TRUE) %>%
group_by(lincsID) %>%
summarize(total = sum(n))
bigramUnited %>%
group_by(lincsID)  %>%
count(lincsID, bigram, sort = TRUE)%>%
summarize(total = sum(n))
bigramUnited %>%
group_by(lincsID)  %>%
summarize(total = sum(n)) %>%
count(lincsID, bigram, sort = TRUE)
bigramUnited %>%
group_by(lincsID)  %>%
count(lincsID, bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramUnited %>%
group_by(lincsID)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
#bigramUnited %>% ggplot(bigramUnited, aes(n, ))
bigramUnited %>% count(bigram, sort = TRUE) %>%  ggplot(aes(n)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
bigramUnited %>% count(bigram, sort = TRUE) %>%  ggplot(aes(n, bigram)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
bigramUnited %>% ggplot(aes(n)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
bigramcount <- bigramUnited %>%
group_by(lincsID)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramUnited %>% count(bigram, sort = TRUE) %>%  ggplot(aes(n)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
bigramCount <- bigramUnited %>%
group_by(lincsID)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramCount %>% count(bigram, sort = TRUE) %>%  ggplot(aes(n)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
bigramCount
bigramCount <- bigramUnited %>%
group_by(lincsID)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramCount %>% count(bigram, sort = TRUE) %>%  ggplot(aes(total)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
bigramCount <- bigramUnited %>%
group_by(lincsID)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramCount %>% count(total, sort = TRUE) %>%  ggplot(aes(total)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
bigramCount
bigramCount <- bigramUnited %>%
group_by(lincsID)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramCount %>% count(total, sort = TRUE) %>%  ggplot(aes(total)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
bigramCount <- bigramCount %>% [order(-total)]
bigramCount
bigramCount <- bigramUnited %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
#bigramCount %>% count(total, sort = TRUE) %>%  ggplot(aes(total)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
#bigramCount <- bigramCount %>% [order(-total)]
bigramCount
bigramCount <- bigramUnited %>%
group_by(bigram)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
#bigramCount %>% count(total, sort = TRUE) %>%  ggplot(aes(total)) + geom_histogram(show.legend = FALSE) + xlim(NA, 0.0009)
#bigramCount <- bigramCount %>% [order(-total)]
#bigramCount
bigramCount
bigramCount <- bigramCount %>% [order(-total)]
bigramCount <- bigramCount[order(-total)]
bigramCount
bigramCount <- bigramCount[order(-total)]
bigramCount
bigramCount <- bigramCount[order(-'total')]
bigramCount <- bigramCount[order(-total)]
bigramCount
ggplot(bigramCount, aes(total)) + geom_histogram()
ggplot(bigramCount, aes(total)) + geom_histogram() + xlim(NA, 0.0009)
ggplot(bigramCount, aes(total)) + geom_histogram() + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700") + theme_minimal()
bigramCount
bigramCount <- bigramUnited %>%
group_by(bigram)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramCount
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700") + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 15) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 45) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 5) + theme_minimal()
bigramCount
View(bigramCount)
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 5) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 0.01) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 1, bins = 500) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 1, bins = 1000) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 1, bins = 2000) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 15, bins = 2000) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 0.5, bins = 2000) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 0.75, bins = 2000) + theme_minimal()
bigramCount <- bigramUnited %>%
group_by(bigram)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n/3424))
bigramCount
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 0.75, bins = 2000) + theme_minimal()
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 0.75, bins = 100) + theme_minimal()
bigramCount <- bigramUnited %>%
group_by(bigram)  %>%
count(bigram, sort = TRUE) %>%
summarize(total = sum(n))
bigramCount
ggplot(bigramCount, aes(total)) + geom_histogram(fill="#ffd700", binwidth = 0.75, bins = 100) + theme_minimal()
#Filtered for stop words
lincsTrigrams <- lincsTrigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word) %>%
filter(!word3 %in% lincs_stop_words$word)
#Remove all digits
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word1))
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word2))
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word3))
#New counts based on frequency
lincsTrigrams %>% count(word1, word2, sort = TRUE)
#Finally I reunite the two columns for purposes of later analyses
Trigram_united <- lincsTrigrams %>% unite(Trigram, word1, word2, word3, sep = " ")
#Filtered for stop words
lincsTrigrams <- lincsTrigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word) %>%
filter(!word3 %in% lincs_stop_words$word)
#Remove all digits
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word1))
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word2))
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word3))
#New counts based on frequency
lincsTrigrams %>% count(word1, word2, word3, sort = TRUE)
#Finally I reunite the two columns for purposes of later analyses
Trigram_united <- lincsTrigrams %>% unite(Trigram, word1, word2, word3, sep = " ")
#Create tri-grams
lincsTrigrams <- lincsEvents %>% unnest_tokens(trigram, QUOTE_TRANSCRIPTION, token = "ngrams", n = 3)
# Split the text into three columns based on the spaces between words
lincsTrigrams <- lincsTrigrams %>% separate(trigram, c("word1", "word2", "word3"), sep = " ")
#Filtered for stop words
lincsTrigrams <- lincsTrigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word) %>%
filter(!word1 %in% lincs_stop_words$word) %>%
filter(!word2 %in% lincs_stop_words$word) %>%
filter(!word3 %in% lincs_stop_words$word)
#Remove all digits
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word1))
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word2))
lincsTrigrams <- lincsTrigrams %>% filter(grepl('^\\D', word3))
lincsTrigrams %>% count(word1, word2, word3, sort = TRUE)
#Finally I reunite the two columns for purposes of later analyses
Trigram_united <- lincsTrigrams %>% unite(Trigram, word1, word2, word3, sep = " ")
lincsTrigrams %>% filter(word1 == "roger", word2 == "henry", word3 == "thomas")
lincsTrigrams %>% filter(word1 == "roger", word2 == "henry", word3 == "thomas") %>% count(lincsID)
lincsTrigrams %>% filter(word1 == "roger", word2 == "henry", word3 == "thomas")
View(lincsTrigrams)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
install.packages('topicmodels')
library(topicmodels)
AssociatedPress
data('AssociatedPress')
head(AssociatedPress)
View(AssociatedPress)
View(lincsEvents)
lincsLDA <- LDA(lincsEvents, k = 2, control = list(seed1234))
library(tidyverse)
library(tidytext)
library(topicmodels)
lincsLDA <- LDA(lincsEvents, k = 2, control = list(seed1234))
library(janaustenr)
library(janeaustenr)
austen_books
head(austen_books())
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
View(lincsDTM)
lincsDTM <- lincsEvents %>% select(lincsID, QUOTE_TRANSCRIPTION, UUID)
lincsDTM <- lincsEvents %>%
unnest_tokens(QUOTE_TRANSCRIPTION, lincsID) %>%
count(QUOTE_TRANSCRIPTION, lincsID) %>%
cast_dtm(QUOTE_TRANSCRIPTION, lincsID, n)
lincsDTM <- lincsDTM %>%
unnest_tokens(QUOTE_TRANSCRIPTION, lincsID) %>%
count(QUOTE_TRANSCRIPTION, lincsID) %>%
cast_dtm(QUOTE_TRANSCRIPTION, lincsID, n)
lincsDTM <- lincsDTM %>%
unnest_tokens(QUOTE_TRANSCRIPTION, lincsID)
lincsDTM <- lincsEvents %>% select(lincsID, QUOTE_TRANSCRIPTION, UUID)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
lincsDTM <- lincsDTM %>%
unnest_tokens(QUOTE_TRANSCRIPTION, lincsID)
lincsDTM <- lincsDTM %>%
unnest_tokens(word, lincsID)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
lincsDTM <- lincsDTM %>%
unnest_tokens(word, lincsID)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID)
lincsDTM <- lincsDTM %>%
unnest_tokens(word, lincsID)
lincsDTM <- lincsDTM %>%
unnest_tokens(word)
lincsDTM <- lincsDTM %>%
unnest_tokens(QUOTE_TRANSCRIPTION, word)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID)
lincsDTM <- lincsDTM %>%
unnest_tokens(QUOTE_TRANSCRIPTION, word)
lincsDTM <- lincsDTM %>%
unnest_tokens(QUOTE_TRANSCRIPTION, word)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID)
lincsDTM <- lincsDTM %>%
unnest_tokens(QUOTE_TRANSCRIPTION, word)
head(austen_books())
lincsDTM <- lincsDTM %>%
unnest_tokens(word, QUOTE_TRANSCRIPTION)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
lincsDTM <- lincsDTM %>%
unnest_tokens(word, QUOTE_TRANSCRIPTION)
lincsDTM <- lincsDTM %>%
unnest_tokens(word, QUOTE_TRANSCRIPTION) %>%
count(QUOTE_TRANSCRIPTION, lincsID) %>%
cast_dtm(QUOTE_TRANSCRIPTION, lincsID, n)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
lincsDTM <- lincsDTM %>%
unnest_tokens(word, QUOTE_TRANSCRIPTION) %>%
count(word, lincsID) %>%
cast_dtm(word, lincsID, n)
View(lincsDTM)
lincsLDA <- LDA(lincsEvents, k = 2, control = list(seed1234))
lincsLDA <- LDA(lincsDTM, k = 2, control = list(seed1234))
lincsLDA <- LDA(lincsDTM, k = 2, control = list(seed = 1234))
View(lincsLDA)
lincsLDA <- LDA(lincsDTM, k = 8, control = list(seed = 1234))
View(lincsLDA)
lincsLDA
lincsTopics
lincsTopics <- tidy(lincsLDA, matrix = "beta")
install.packages('broom')
blogdown:::preview_site(startup = TRUE)
install.packages("broom")
library(tidyverse)
library(tidytext)
library(topicmodels)
library(janeaustenr)
library(broom)
lincsTopics <- tidy(lincsLDA, matrix = "beta")
install.packages('reshape2')
library(reshape2)
lincsTopics <- tidy(lincsLDA, matrix = "beta")
lincsTopics
lincs_top_terms <- lincsTopics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
lincs_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
View(lincsDTM)
lincsDTM <- lincsDTM %>% filter(grepl('^\\D', QUOTE_TRANSCRIPTION))
lincsEvents <- lincsOCR %>% filter(TYPE == 'EVENT') %>% select(UUID, QUOTE_TRANSCRIPTION)
#Extract the first word from each allegation and places it in a new column called 'lincsID' to act as an index to the original text
lincsEvents <- lincsEvents %>% mutate(lincsID = (str_extract(QUOTE_TRANSCRIPTION, "\\w+")))
View(lincsEvents)
View(lincsEvents)
lincsDTM <- lincsDTM %>% word(QUOTE_TRANSCRIPTION, -1)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
lincsDTM <- lincsDTM %>% word(QUOTE_TRANSCRIPTION, -1)
lincsDTM <- word(lincsDTM, QUOTE_TRANSCRIPTION, -1)
lincsDTM <- word(lincsDTM$QUOTE_TRANSCRIPTION, -1)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
lincsDTM <- word(lincsDTM$QUOTE_TRANSCRIPTION, 1)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
lincsDTM <- str_remove(lincsDTM$QUOTE_TRANSCRIPTION, 1)
View(lincsEvents)
lincsEvents <- lincsEvents %>% mutate(lincsID = (str_remove_all(QUOTE_TRANSCRIPTION, "\\w+")))
lincsEvents <- lincsOCR %>% filter(TYPE == 'EVENT') %>% select(UUID, QUOTE_TRANSCRIPTION)
#Extract the first word from each allegation and places it in a new column called 'lincsID' to act as an index to the original text
lincsEvents <- lincsEvents %>% mutate(lincsID = (str_extract(QUOTE_TRANSCRIPTION, "\\w+")))
lincsEvents <- lincsEvents %>% (str_remove_all(QUOTE_TRANSCRIPTION, "\\w+"))
lincsEvents <- lincsEvents %>% (str_remove_all(lincsEvents$QUOTE_TRANSCRIPTION, "\\w+"))
lincsEvents <- (str_remove_all(lincsEvents$QUOTE_TRANSCRIPTION, "\\w+"))
#Filters out so we just have the text from the allegations (this column also contains information about people and places)
lincsEvents <- lincsOCR %>% filter(TYPE == 'EVENT') %>% select(UUID, QUOTE_TRANSCRIPTION)
#Extract the first word from each allegation and places it in a new column called 'lincsID' to act as an index to the original text
lincsEvents <- lincsEvents %>% mutate(lincsID = (str_extract(QUOTE_TRANSCRIPTION, "\\w+")))
#Rename column
lincsEvents <- lincsEvents %>% rename(word = 'QUOTE_TRANSCRIPTION')
#Removal of stop_words, digits, and place names
#lincsEvents <- lincsEvents %>% gsub("[\\d]", "", word)
#Rename column
lincsEvents <- lincsEvents %>% rename(word = 'QUOTE_TRANSCRIPTION')
lincsEvents <- lincsEvents %>% (str_remove_all(lincsEvents$word, "\\w+"))
lincsEvents <- lincsEvents %>% (str_remove_all(word, "\\w+"))
lincsEvents <- lincsEvents %>% sub(word, "\\w+")
lincsEvents <- lincsEvents %>% filter(grepl(word, "\\w+"))
#Filters out so we just have the text from the allegations (this column also contains information about people and places)
lincsEvents <- lincsOCR %>% filter(TYPE == 'EVENT') %>% select(UUID, QUOTE_TRANSCRIPTION)
#Extract the first word from each allegation and places it in a new column called 'lincsID' to act as an index to the original text
lincsEvents <- lincsEvents %>% mutate(lincsID = (str_extract(QUOTE_TRANSCRIPTION, "\\w+")))
#Rename column
lincsEvents <- lincsEvents %>% rename(word = 'QUOTE_TRANSCRIPTION')
#Removal of stop_words, digits, and place names
#lincsEvents <- lincsEvents %>% gsub("[\\d]", "", word)
lincsDTM <- lincsEvents %>% select(QUOTE_TRANSCRIPTION, lincsID, UUID)
lincsDTM <- lincsEvents %>% select(word, lincsID, UUID)
lincsEvents <- lincsDTM %>%  mutate(word(gsub("\\w+", "")))
lincsEvents <- lincsDTM %>% filter(word(gsub("\\w+", "")))
